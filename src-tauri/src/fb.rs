/// Generated by https://quicktype.io
use serde::{Deserialize, Serialize};
extern crate serde_json;

#[derive(Serialize, Deserialize)]
pub struct FacebookGroups {
    #[serde(rename = "data")]
    data: Vec<GroupDatum>,

    #[serde(rename = "paging")]
    paging: Option<Paging>,
}
#[derive(Serialize, Deserialize)]
pub struct FacebookPages {
    #[serde(rename = "data")]
    data: Vec<PageDatum>,

    #[serde(rename = "paging")]
    paging: Option<Paging>,
}

#[derive(Serialize, Deserialize)]
pub struct GroupDatum {
    #[serde(rename = "id")]
    id: String,

    #[serde(rename = "name")]
    name: String,

    #[serde(rename = "description")]
    description: Option<String>,

    #[serde(rename = "picture")]
    picture: Option<Picture>,
}
#[derive(Serialize, Deserialize)]
pub struct PageDatum {
    #[serde(rename = "id")]
    id: String,

    #[serde(rename = "page_token")]
    page_token: String,
}

#[derive(Serialize, Deserialize)]
pub struct Picture {
    #[serde(rename = "data")]
    data: Data,
}

#[derive(Serialize, Deserialize)]
pub struct Data {
    #[serde(rename = "height")]
    height: i64,

    #[serde(rename = "is_silhouette")]
    is_silhouette: bool,

    #[serde(rename = "url")]
    url: String,

    #[serde(rename = "width")]
    width: i64,
}

#[derive(Serialize, Deserialize)]
pub struct Paging {
    #[serde(rename = "cursors")]
    cursors: Cursors,

    #[serde(rename = "next")]
    next: Option<String>,

    #[serde(rename = "previous")]
    previous: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct Cursors {
    #[serde(rename = "before")]
    before: Option<String>,

    #[serde(rename = "after")]
    after: Option<String>,
}
